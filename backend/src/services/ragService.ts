import { ChromaClient } from 'chromadb';
import { HfInference } from '@huggingface/inference';
import axios from 'axios';
import { getBusinessConfig } from '../config/business';
import { config } from '../config';

interface RAGDocument {
  id: string;
  content: string;
  metadata: {
    type: 'service' | 'pricing' | 'policy' | 'general';
    category?: string;
    language: 'hi' | 'en' | 'te';
  };
}

export class RAGService {
  private hf: HfInference | null = null;
  private chromaClient: ChromaClient;
  private collectionName = 'yuva_digital_studio';
  private businessConfig: any;
  private isInitialized = false;  constructor() {
    if (config.huggingface?.apiKey) {
      this.hf = new HfInference(config.huggingface.apiKey);
    } else {
      console.warn('‚ö†Ô∏è  HuggingFace API key not found. RAG embeddings will use fallback search.');
      this.hf = null;
    }
    
    try {
      this.chromaClient = new ChromaClient({
        host: 'localhost',
        port: 8000,
      });
    } catch (error) {
      console.warn('‚ö†Ô∏è  ChromaDB not available. Using fallback search only.');
      this.chromaClient = null as any;
    }
    
    this.businessConfig = getBusinessConfig();
  }
  async initialize(): Promise<void> {
    if (this.isInitialized) return;

    try {
      if (this.chromaClient) {
        try {
          await this.chromaClient.getCollection({ name: this.collectionName });
          console.log('Using existing ChromaDB collection');
        } catch (error) {
          console.log('Creating new ChromaDB collection');
          await this.chromaClient.createCollection({ name: this.collectionName });
          await this.indexBusinessKnowledge();
        }
      } else {
        console.log('ChromaDB not available, using fallback search');
      }
      
      this.isInitialized = true;
    } catch (error) {
      console.warn('ChromaDB not available, falling back to in-memory search:', error);
      this.isInitialized = true;
    }
  }private async getEmbedding(text: string): Promise<number[]> {
    try {
      if (!this.hf) {
        console.log('üîÑ HuggingFace not available, skipping embedding generation');
        return [];
      }
        const response = await this.hf.featureExtraction({
        model: 'sentence-transformers/all-MiniLM-L6-v2',
        inputs: text,
      });
      
      if (Array.isArray(response)) {
        if (response.length > 0 && Array.isArray(response[0])) {
          return response[0] as number[];
        }
        return response as number[];
      }
      
      return [];
    } catch (error) {
      console.error('Failed to generate embedding:', error);
      return [];
    }
  }

  private async indexBusinessKnowledge(): Promise<void> {
    const documents = this.generateBusinessDocuments();
      try {
      const collection = await this.chromaClient.getCollection({ name: this.collectionName });
      
      const embeddings = await Promise.all(
        documents.map(doc => this.getEmbedding(doc.content))
      );

      await collection.add({
        ids: documents.map(doc => doc.id),
        embeddings: embeddings.filter(emb => emb.length > 0),
        documents: documents.map(doc => doc.content),
        metadatas: documents.map(doc => doc.metadata),
      });

      console.log(`Indexed ${documents.length} business knowledge documents`);
    } catch (error) {
      console.error('Failed to index business knowledge:', error);
    }
  }

  private generateBusinessDocuments(): RAGDocument[] {
    const documents: RAGDocument[] = [];
    const business = this.businessConfig;    // Business overview documents
    const languages: ('hi' | 'en')[] = ['hi', 'en'];
    
    languages.forEach(lang => {
      // Business overview
      documents.push({
        id: `overview-${lang}`,
        content: this.getBusinessOverview(lang),
        metadata: { type: 'general', category: 'overview', language: lang }
      });

      // Services information
      Object.entries(business.services).forEach(([serviceKey, service]: [string, any]) => {
        documents.push({
          id: `service-${serviceKey}-${lang}`,
          content: this.getServiceDescription(service, lang),
          metadata: { type: 'service', category: serviceKey, language: lang }
        });
      });

      // Pricing information
      documents.push({
        id: `pricing-${lang}`,
        content: this.getPricingDescription(lang),
        metadata: { type: 'pricing', category: 'packages', language: lang }
      });

      // Policies and general info
      documents.push({
        id: `policies-${lang}`,
        content: this.getPoliciesDescription(lang),
        metadata: { type: 'policy', category: 'general', language: lang }
      });
    });

    return documents;
  }  private getBusinessOverview(language: 'hi' | 'en'): string {
    const business = this.businessConfig;
    
    switch (language) {
      case 'hi':
        return `‡§Ø‡•Å‡§µ‡§æ ‡§°‡§ø‡§ú‡§ø‡§ü‡§≤ ‡§∏‡•ç‡§ü‡•Ç‡§°‡§ø‡§Ø‡•ã ‡§π‡•à‡§¶‡§∞‡§æ‡§¨‡§æ‡§¶ ‡§Æ‡•á‡§Ç ‡§∏‡•ç‡§•‡§ø‡§§ ‡§è‡§ï ‡§™‡•ç‡§∞‡•ã‡§´‡•á‡§∂‡§®‡§≤ ‡§´‡•ã‡§ü‡•ã‡§ó‡•ç‡§∞‡§æ‡§´‡•Ä ‡§∏‡•ç‡§ü‡•Ç‡§°‡§ø‡§Ø‡•ã ‡§π‡•à‡•§ ‡§π‡§Æ‡§æ‡§∞‡•á ‡§Æ‡§æ‡§≤‡§ø‡§ï ‡§∂‡•ç‡§∞‡•Ä ‡§Ø‡•Å‡§µ‡§∞‡§æ‡§ú ‡§∂‡§∞‡•ç‡§Æ‡§æ ‡§π‡•à‡§Ç‡•§ ‡§π‡§Æ ‡§µ‡•á‡§°‡§ø‡§Ç‡§ó ‡§´‡•ã‡§ü‡•ã‡§ó‡•ç‡§∞‡§æ‡§´‡•Ä, ‡§™‡•ã‡§∞‡•ç‡§ü‡•ç‡§∞‡•á‡§ü, ‡§á‡§µ‡•á‡§Ç‡§ü ‡§´‡•ã‡§ü‡•ã‡§ó‡•ç‡§∞‡§æ‡§´‡•Ä, ‡§™‡•ç‡§∞‡•Ä-‡§µ‡•á‡§°‡§ø‡§Ç‡§ó ‡§∂‡•Ç‡§ü, ‡§¨‡•á‡§¨‡•Ä ‡§´‡•ã‡§ü‡•ã‡§ó‡•ç‡§∞‡§æ‡§´‡•Ä ‡§Ü‡§¶‡§ø ‡§∏‡•á‡§µ‡§æ‡§è‡§Ç ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç‡•§ ‡§∏‡•ç‡§ü‡•Ç‡§°‡§ø‡§Ø‡•ã ‡§ï‡§æ ‡§™‡§§‡§æ: ${business.location.address}, ${business.location.city}‡•§ ‡§´‡•ã‡§®: ${business.contact.phone[0]}‡•§ ‡§π‡§Æ‡§æ‡§∞‡•á ‡§ï‡§æ‡§Æ ‡§ï‡•á ‡§ò‡§Ç‡§ü‡•á ‡§∏‡•Å‡§¨‡§π 9 ‡§¨‡§ú‡•á ‡§∏‡•á ‡§∞‡§æ‡§§ 9 ‡§¨‡§ú‡•á ‡§§‡§ï ‡§π‡•à‡§Ç‡•§`;
      
      default:
        return `Yuva Digital Studio is a professional photography studio located in Hyderabad. Our owner is Mr. Yuvraj Sharma. We provide wedding photography, portraits, event photography, pre-wedding shoots, baby photography and more. Studio address: ${business.location.address}, ${business.location.city}. Phone: ${business.contact.phone[0]}. Our working hours are 9 AM to 9 PM.`;
    }
  }

  private getServiceDescription(service: any, language: 'hi' | 'en'): string {
    const name = service.name[language] || service.name.en;
    const description = service.description[language] || service.description.en;
    
    let content = `${name}: ${description}`;
      if (service.packages) {
      content += language === 'hi' ? '\n\n‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§™‡•à‡§ï‡•á‡§ú:\n' : '\n\nAvailable packages:\n';
      
      Object.entries(service.packages).forEach(([key, pkg]: [string, any]) => {
        content += `- ${pkg.name[language] || pkg.name.en}: ‚Çπ${pkg.price} (${pkg.duration})\n`;
        if (pkg.includes) {
          content += `  ${language === 'hi' ? '‡§∂‡§æ‡§Æ‡§ø‡§≤:' : 'Includes:'} ${pkg.includes[language] || pkg.includes.en}\n`;
        }
      });
    }
    
    return content;
  }
  private getPricingDescription(language: 'hi' | 'en'): string {
    const business = this.businessConfig;
    
    switch (language) {
      case 'hi':
        return `‡§π‡§Æ‡§æ‡§∞‡•Ä ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§∏‡•á‡§µ‡§æ‡§ì‡§Ç ‡§ï‡•Ä ‡§ï‡•Ä‡§Æ‡§§‡•á‡§Ç:\n- ‡§µ‡•á‡§°‡§ø‡§Ç‡§ó ‡§´‡•ã‡§ü‡•ã‡§ó‡•ç‡§∞‡§æ‡§´‡•Ä: ‚Çπ25,000 ‡§∏‡•á ‡§∂‡•Å‡§∞‡•Ç\n- ‡§™‡•ã‡§∞‡•ç‡§ü‡•ç‡§∞‡•á‡§ü ‡§∏‡•á‡§∂‡§®: ‚Çπ5,000 ‡§∏‡•á ‡§∂‡•Å‡§∞‡•Ç\n- ‡§á‡§µ‡•á‡§Ç‡§ü ‡§´‡•ã‡§ü‡•ã‡§ó‡•ç‡§∞‡§æ‡§´‡•Ä: ‚Çπ15,000 ‡§∏‡•á ‡§∂‡•Å‡§∞‡•Ç\n- ‡§™‡•ç‡§∞‡•Ä-‡§µ‡•á‡§°‡§ø‡§Ç‡§ó ‡§∂‡•Ç‡§ü: ‚Çπ12,000 ‡§∏‡•á ‡§∂‡•Å‡§∞‡•Ç\n‡§∏‡§≠‡•Ä ‡§ï‡•Ä‡§Æ‡§§‡•á‡§Ç GST ‡§Ö‡§§‡§ø‡§∞‡§ø‡§ï‡•ç‡§§ ‡§π‡•à‡§Ç‡•§ ‡§µ‡§ø‡§∏‡•ç‡§§‡•É‡§§ ‡§™‡•à‡§ï‡•á‡§ú ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï ‡§ï‡§∞‡•á‡§Ç‡•§`;
      
      default:
        return `Our main service pricing:\n- Wedding Photography: Starting from ‚Çπ25,000\n- Portrait Session: Starting from ‚Çπ5,000\n- Event Photography: Starting from ‚Çπ15,000\n- Pre-wedding Shoot: Starting from ‚Çπ12,000\nAll prices are exclusive of GST. Contact us for detailed package information.`;
    }
  }
  private getPoliciesDescription(language: 'hi' | 'en'): string {
    switch (language) {
      case 'hi':
        return `‡§π‡§Æ‡§æ‡§∞‡•Ä ‡§®‡•Ä‡§§‡§ø‡§Ø‡§æ‡§Ç:\n- 50% ‡§Ö‡§ó‡•ç‡§∞‡§ø‡§Æ ‡§≠‡•Å‡§ó‡§§‡§æ‡§® ‡§¨‡•Å‡§ï‡§ø‡§Ç‡§ó ‡§ï‡•á ‡§∏‡§Æ‡§Ø\n- ‡§∂‡•á‡§∑ ‡§∞‡§æ‡§∂‡§ø ‡§∏‡•á‡§µ‡§æ ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§π‡•ã‡§®‡•á ‡§™‡§∞\n- ‡§∞‡§¶‡•ç‡§¶‡•Ä‡§ï‡§∞‡§£: 48 ‡§ò‡§Ç‡§ü‡•á ‡§™‡§π‡§≤‡•á ‡§∏‡•Ç‡§ö‡§®‡§æ ‡§¶‡•á‡§Ç\n- ‡§Æ‡•å‡§∏‡§Æ ‡§ï‡•Ä ‡§µ‡§ú‡§π ‡§∏‡•á ‡§¶‡•á‡§∞‡•Ä ‡§π‡•ã ‡§∏‡§ï‡§§‡•Ä ‡§π‡•à\n- ‡§∏‡§≠‡•Ä ‡§´‡•ã‡§ü‡•ã 7-14 ‡§¶‡§ø‡§®‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞‡•Ä\n- ‡§°‡§ø‡§ú‡§ø‡§ü‡§≤ ‡§ï‡•â‡§™‡•Ä + ‡§™‡•ç‡§∞‡§ø‡§Ç‡§ü‡•ç‡§∏ ‡§â‡§™‡§≤‡§¨‡•ç‡§ß`;
      
      default:
        return `Our policies:\n- 50% advance payment at booking time\n- Remaining amount after service completion\n- Cancellation: 48 hours advance notice required\n- Weather delays may occur\n- All photos delivered within 7-14 days\n- Digital copies + prints available`;
    }
  }
  async searchKnowledge(query: string, language: 'hi' | 'en' = 'hi', limit: number = 3): Promise<string[]> {
    await this.initialize();
    
    if (!this.chromaClient) {
      console.log('üîÑ Using fallback search (ChromaDB not available)');
      return this.fallbackSearch(query, language, limit);
    }
    
    try {
      const collection = await this.chromaClient.getCollection({ name: this.collectionName });
      
      const queryEmbedding = await this.getEmbedding(query);
      
      if (queryEmbedding.length === 0) {
        return this.fallbackSearch(query, language, limit);
      }

      const results = await collection.query({
        queryEmbeddings: [queryEmbedding],
        nResults: limit,
        where: { language: language },
      });
      
      return results.documents?.[0]?.filter(doc => doc !== null) as string[] || [];
    } catch (error) {
      console.warn('ChromaDB search failed, using fallback:', error);
      return this.fallbackSearch(query, language, limit);
    }
  }

  private fallbackSearch(query: string, language: 'hi' | 'en', limit: number): string[] {
    // Simple keyword-based fallback search
    const documents = this.generateBusinessDocuments();
    const queryLower = query.toLowerCase();
    
    const relevantDocs = documents
      .filter(doc => doc.metadata.language === language)
      .filter(doc => doc.content.toLowerCase().includes(queryLower))
      .slice(0, limit)
      .map(doc => doc.content);
      
    return relevantDocs.length > 0 ? relevantDocs : [this.getBusinessOverview(language)];
  }  async generateRAGResponse(query: string, language: 'hi' | 'en' = 'hi'): Promise<string> {
    try {
      if (!config.openRouter?.apiKey) {
        console.warn('‚ö†Ô∏è  OpenRouter API key not found. Using fallback response.');
        return this.getFallbackResponse(language);
      }

      const relevantDocs = await this.searchKnowledge(query, language, 3);
      
      const context = relevantDocs.join('\n\n');
      
      const systemMessage = this.getSystemMessage(language);      const userMessage = `Based on the following business information, answer the user's question in ${language === 'hi' ? 'Hindi' : 'English'} with a SHORT and CONVERSATIONAL response (maximum 2-3 sentences):

Context:
${context}

User Question: ${query}

Keep your response brief, friendly, and easy to understand when spoken aloud. If the question cannot be answered from the context, politely say so and suggest contacting the studio directly.`;const response = await axios.post(
        'https://openrouter.ai/api/v1/chat/completions',
        {
          model: 'meta-llama/llama-3.2-3b-instruct:free',
          messages: [
            { role: 'system', content: systemMessage },
            { role: 'user', content: userMessage }
          ],          max_tokens: 100, // Reduced from 200 to ensure shorter responses
          temperature: 0.3,
        },
        {
          headers: {
            'Authorization': `Bearer ${config.openRouter?.apiKey}`,
            'Content-Type': 'application/json',
            'HTTP-Referer': 'http://localhost:3001',
            'X-Title': 'Yuva Digital Studio Voice Bot'
          },
        }
      );

      return response.data.choices[0]?.message?.content || this.getFallbackResponse(language);
    } catch (error) {
      console.error('RAG response generation failed:', error);
      return this.getFallbackResponse(language);
    }
  }  private getSystemMessage(language: 'hi' | 'en'): string {
    switch (language) {
      case 'hi':
        return '‡§Ü‡§™ ‡§Ø‡•Å‡§µ‡§æ ‡§°‡§ø‡§ú‡§ø‡§ü‡§≤ ‡§∏‡•ç‡§ü‡•Ç‡§°‡§ø‡§Ø‡•ã ‡§ï‡•á ‡§≤‡§ø‡§è ‡§è‡§ï AI ‡§Ö‡§∏‡§ø‡§∏‡•ç‡§ü‡•á‡§Ç‡§ü ‡§π‡•à‡§Ç‡•§ ‡§π‡§Æ‡•á‡§∂‡§æ ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§Æ‡•á‡§Ç ‡§õ‡•ã‡§ü‡•á, ‡§∏‡•ç‡§™‡§∑‡•ç‡§ü, ‡§î‡§∞ ‡§Æ‡§ø‡§§‡•ç‡§∞‡§µ‡§§ ‡§ú‡§µ‡§æ‡§¨ ‡§¶‡•á‡§Ç‡•§ ‡§¨‡•ã‡§≤‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ü‡§∏‡§æ‡§® ‡§≠‡§æ‡§∑‡§æ ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç‡•§';
      
      default:
        return 'You are an AI assistant for Yuva Digital Studio. Always respond with short, clear, and friendly answers in English. Use simple language that is easy to speak aloud.';
    }
  }private getFallbackResponse(language: 'hi' | 'en'): string {
    switch (language) {
      case 'hi':
        return '‡§ï‡•ç‡§∑‡§Æ‡§æ ‡§ï‡§∞‡•á‡§Ç, ‡§Æ‡•à‡§Ç ‡§á‡§∏ ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§ï‡§æ ‡§â‡§§‡•ç‡§§‡§∞ ‡§®‡§π‡•Ä‡§Ç ‡§¶‡•á ‡§∏‡§ï‡§§‡§æ‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§∏‡•Ä‡§ß‡•á ‡§π‡§Æ‡§∏‡•á ‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï ‡§ï‡§∞‡•á‡§Ç: ' + this.businessConfig.contact.phone[0];
      
      default:
        return 'Sorry, I cannot answer this question. Please contact us directly: ' + this.businessConfig.contact.phone[0];
    }
  }
}

import fetch from "node-fetch";
import { config } from "../config";
import { AIResponse } from "../types";
import { getBusinessConfig } from "../config/business";

export class OpenRouterService {
  private apiKey: string;
  private model: string;
  private apiUrl: string;
  private businessConfig: any;
  private requestQueue: Array<() => Promise<any>> = [];
  private isProcessingQueue: boolean = false;
  private lastRequestTime: number = 0;
  private minRequestInterval: number = 1000; // 1 second between requests
  constructor() {
    this.apiKey = config.openRouter.apiKey;
    this.model = config.openRouter.model;
    this.apiUrl = config.openRouter.apiUrl;
    this.businessConfig = getBusinessConfig();

    if (!this.apiKey) {
      throw new Error('OPENROUTER_API_KEY is required in environment variables');
    }
  }  async generateResponse(
    userInput: string,
    language: "hi" | "en",
    context: string[] = []
  ): Promise<AIResponse> {
    return this.queueRequest(() => this.makeAPIRequest(userInput, language, context));
  }

  private async queueRequest<T>(requestFn: () => Promise<T>): Promise<T> {
    return new Promise((resolve, reject) => {
      this.requestQueue.push(async () => {
        try {
          const result = await requestFn();
          resolve(result);
        } catch (error) {
          reject(error);
        }
      });
      
      this.processQueue();
    });
  }

  private async processQueue(): Promise<void> {
    if (this.isProcessingQueue || this.requestQueue.length === 0) return;
    
    this.isProcessingQueue = true;
    
    while (this.requestQueue.length > 0) {
      const now = Date.now();
      const timeSinceLastRequest = now - this.lastRequestTime;
      
      if (timeSinceLastRequest < this.minRequestInterval) {
        await new Promise(resolve => setTimeout(resolve, this.minRequestInterval - timeSinceLastRequest));
      }
      
      const request = this.requestQueue.shift();
      if (request) {
        this.lastRequestTime = Date.now();
        await request();
      }
    }
    
    this.isProcessingQueue = false;
  }

  private async makeAPIRequest(
    userInput: string,
    language: "hi" | "en",
    context: string[] = []
  ): Promise<AIResponse> {
    try {
      // Preprocess and validate input
      const processedInput = this.preprocessInput(userInput, language);
      
      // If input is too unclear, use fallback immediately
      if (this.isInputTooUnclear(processedInput)) {
        console.log(`üîÑ Input too unclear, using fallback: "${processedInput}"`);
        return this.getRateLimitFallback(processedInput, language, context);
      }

      const messages = this.buildMessages(processedInput, language, context);

      const response = await fetch(this.apiUrl, {
        method: "POST",
        headers: {
          Authorization: `Bearer ${this.apiKey}`,
          "HTTP-Referer": config.server.baseUrl,
          "X-Title": "Yuva Digital Studio Voice Bot",
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          model: this.model,
          messages: messages,
          max_tokens: 100, // Even shorter for faster, more concise responses
          temperature: 0.2, // Lower temperature for more consistent, complete responses
          stream: false,
          stop: ["\n\n", "User:", "Assistant:"], // Stop tokens to prevent incomplete responses
        }),
      });

      if (response.status === 429) {
        console.warn("Rate limit hit, using intelligent fallback");
        return this.getRateLimitFallback(processedInput, language, context);
      }

      if (!response.ok) {
        console.warn(`OpenRouter API error: ${response.statusText}, using fallback`);
        return this.getErrorFallback(processedInput, language);
      }

      const data = await response.json();
      const messageChoice = data.choices?.[0]?.message;
      const assistantMessage = messageChoice?.content || messageChoice?.reasoning || "";

      // Validate AI response
      if (!assistantMessage || assistantMessage.trim().length < 5) {
        console.warn("AI response too short, using fallback");
        return this.getRateLimitFallback(processedInput, language, context);
      }

      const intent = this.extractIntent(processedInput, language);
      const nextAction = this.determineNextAction(intent, processedInput, language);

      return {
        text: this.cleanResponse(assistantMessage),
        intent: intent,
        confidence: 0.9,
        language: language,
        nextAction: nextAction,
      };
    } catch (error) {
      console.warn("OpenRouter API Error:", error);

      return {
        text: this.getFallbackResponse(userInput, language),
        intent: this.extractIntent(userInput, language),
        confidence: 0.6,
        language: language,
        nextAction: this.determineNextAction(
          this.extractIntent(userInput, language),
          userInput,
          language
        ),
      };
    }
  }

  private preprocessInput(userInput: string, language: "hi" | "en"): string {
    let processed = userInput.trim();
    
    // Remove common speech artifacts
    processed = processed.replace(/\b(um|uh|ah|er|hmm|like|you know|i mean)\b/gi, '');
    processed = processed.replace(/\s+/g, ' '); // Normalize whitespace
    
    // Handle incomplete sentences
    if (processed.endsWith('of') || processed.endsWith('the') || processed.endsWith('a') || 
        processed.endsWith('an') || processed.endsWith('for') || processed.endsWith('to') ||
        processed.endsWith('with') || processed.endsWith('about') || processed.endsWith('on')) {
      // Add context to incomplete sentences
      processed += language === 'hi' ? ' ‡§ï‡•ç‡§Ø‡§æ ‡§™‡•Ç‡§õ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç?' : ' what are you asking about?';
    }
    
    return processed;
  }

  private isInputTooUnclear(input: string): boolean {
    const lowerInput = input.toLowerCase();
    
    // Very short inputs
    if (input.trim().length < 3) return true;
    
    // Incomplete thoughts
    if (lowerInput.includes('modern solution') || lowerInput.includes('sources of')) return true;
    
    // Just question words without context
    if (/^(what|how|why|when|where|who)\s*$/.test(lowerInput)) return true;
    
    // Single words that don't provide enough context
    if (/^[a-zA-Z]+$/.test(input) && input.length < 8) return true;
    
    return false;
  }

  private buildMessages(
    userInput: string,
    language: "hi" | "en",
    context: string[]
  ) {
    const systemPrompt = this.getSystemPrompt(language);
    const contextText =
      context.length > 0
        ? `\nRecent conversation: ${context.slice(-3).join(" ")}`
        : "";

    return [
      {
        role: "system",
        content: systemPrompt,
      },
      {
        role: "user",
        content: `${userInput}${contextText}`,
      },
    ];
  }

  private getSystemPrompt(language: "hi" | "en"): string {
    const businessName = this.businessConfig.name;
    const services = this.businessConfig.services
      .map((s: any) => s.name)
      .join(", ");

    if (language === "hi") {
      return `‡§Ü‡§™ ${businessName} ‡§ï‡•á ‡§≤‡§ø‡§è ‡§è‡§ï ‡§¨‡•Å‡§¶‡•ç‡§ß‡§ø‡§Æ‡§æ‡§® ‡§µ‡•â‡§Ø‡§∏ ‡§Ö‡§∏‡§ø‡§∏‡•ç‡§ü‡•á‡§Ç‡§ü ‡§π‡•à‡§Ç‡•§ ‡§Ü‡§™ ‡§è‡§ï ‡§Ö‡§®‡•Å‡§≠‡§µ‡•Ä AI ‡§è‡§ú‡•á‡§Ç‡§ü ‡§π‡•à‡§Ç ‡§ú‡•ã ‡§®‡§ø‡§Æ‡•ç‡§®‡§≤‡§ø‡§ñ‡§ø‡§§ ‡§ï‡§æ‡§∞‡•ç‡§Ø ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç:

‡§µ‡•ç‡§Ø‡§æ‡§µ‡§∏‡§æ‡§Ø‡§ø‡§ï ‡§∏‡•á‡§µ‡§æ‡§è‡§Ç: ${services}

‡§Ü‡§™‡§ï‡•Ä ‡§ú‡§ø‡§Æ‡•ç‡§Æ‡•á‡§¶‡§æ‡§∞‡§ø‡§Ø‡§æ‡§Ç:
1. ‡§Ö‡§™‡•â‡§á‡§Ç‡§ü‡§Æ‡•á‡§Ç‡§ü ‡§¨‡•Å‡§ï‡§ø‡§Ç‡§ó - ‡§ó‡•ç‡§∞‡§æ‡§π‡§ï ‡§ï‡§æ ‡§®‡§æ‡§Æ, ‡§∏‡•á‡§µ‡§æ, ‡§î‡§∞ ‡§´‡•ã‡§® ‡§®‡§Ç‡§¨‡§∞ ‡§≤‡•á‡§Ç
2. ‡§ë‡§∞‡•ç‡§°‡§∞ ‡§ü‡•ç‡§∞‡•à‡§ï‡§ø‡§Ç‡§ó - ‡§ë‡§∞‡•ç‡§°‡§∞ ‡§®‡§Ç‡§¨‡§∞ ‡§∏‡•á ‡§∏‡•ç‡§•‡§ø‡§§‡§ø ‡§¨‡§§‡§æ‡§è‡§Ç  
3. ‡§Æ‡•Ç‡§≤‡•ç‡§Ø ‡§®‡§ø‡§∞‡•ç‡§ß‡§æ‡§∞‡§£ - ‡§∏‡•á‡§µ‡§æ‡§ì‡§Ç ‡§ï‡•Ä ‡§ï‡•Ä‡§Æ‡§§‡•á‡§Ç ‡§¨‡§§‡§æ‡§è‡§Ç
4. ‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä - ‡§µ‡•ç‡§Ø‡§æ‡§™‡§æ‡§∞ ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§¶‡•á‡§Ç

‡§®‡§ø‡§Ø‡§Æ:
- ‡§π‡§Æ‡•á‡§∂‡§æ 2 ‡§≤‡§æ‡§á‡§® ‡§Ø‡§æ ‡§ï‡§Æ ‡§Æ‡•á‡§Ç ‡§ú‡§µ‡§æ‡§¨ ‡§¶‡•á‡§Ç (‡§µ‡•â‡§Ø‡§∏ ‡§ï‡•á ‡§≤‡§ø‡§è)
- ‡§µ‡§ø‡§®‡§Æ‡•ç‡§∞ ‡§î‡§∞ ‡§∏‡§π‡§æ‡§Ø‡§ï ‡§∞‡§π‡•á‡§Ç
- ‡§Ö‡§ó‡§∞ ‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ ‡§ï‡§æ ‡§á‡§®‡§™‡•Å‡§ü ‡§Ö‡§ß‡•Ç‡§∞‡§æ ‡§Ø‡§æ ‡§Ö‡§∏‡•ç‡§™‡§∑‡•ç‡§ü ‡§π‡•à, ‡§§‡•ã ‡§∏‡•ç‡§™‡§∑‡•ç‡§ü‡•Ä‡§ï‡§∞‡§£ ‡§Æ‡§æ‡§Ç‡§ó‡•á‡§Ç
- ‡§Ö‡§ó‡§∞ ‡§Ü‡§™ ‡§ï‡§ø‡§∏‡•Ä ‡§ö‡•Ä‡§ú‡§º ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡§Ç ‡§§‡•ã ‡§∏‡•ç‡§™‡§∑‡•ç‡§ü ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡§π‡•á‡§Ç
- ‡§µ‡•ç‡§Ø‡§æ‡§µ‡§π‡§æ‡§∞‡§ø‡§ï ‡§ï‡§æ‡§∞‡•ç‡§∞‡§µ‡§æ‡§à ‡§∏‡•Å‡§ù‡§æ‡§è‡§Ç
- ‡§ï‡§≠‡•Ä ‡§≠‡•Ä ‡§Ö‡§ß‡•Ç‡§∞‡§æ ‡§ú‡§µ‡§æ‡§¨ ‡§® ‡§¶‡•á‡§Ç - ‡§π‡§Æ‡•á‡§∂‡§æ ‡§™‡•Ç‡§∞‡§æ ‡§î‡§∞ ‡§∏‡•ç‡§™‡§∑‡•ç‡§ü ‡§ú‡§µ‡§æ‡§¨ ‡§¶‡•á‡§Ç
- ‡§Ö‡§ó‡§∞ ‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ ‡§Ö‡§ß‡•Ç‡§∞‡§æ ‡§µ‡§æ‡§ï‡•ç‡§Ø ‡§¨‡•ã‡§≤‡§§‡§æ ‡§π‡•à, ‡§§‡•ã ‡§â‡§∏‡•á ‡§™‡•Ç‡§∞‡§æ ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§Æ‡§¶‡§¶ ‡§ï‡§∞‡•á‡§Ç`;
    } else {
      return `You are an intelligent voice assistant for ${businessName}. You are an experienced AI agent capable of:

Business Services: ${services}

Your responsibilities:
1. Appointment Booking - Collect customer name, service type, and phone number
2. Order Tracking - Provide status updates using order numbers
3. Pricing Information - Share service pricing details
4. General Information - Provide business information

Rules:
- Always respond in 2 lines or less (for voice interaction)
- Be polite and helpful
- If the user's input is incomplete or unclear, ask for clarification
- If unsure about something, ask for clarification
- Suggest practical next steps
- Take initiative to guide the conversation toward booking or helping the customer
- NEVER give incomplete answers - always provide complete and clear responses
- If the user speaks an incomplete sentence, help them complete it
- Handle any type of input gracefully, even if unclear or partial`;
    }
  }  private cleanResponse(text: string): string {
    let cleaned = text
      .replace(/^\s*Assistant:\s*/i, "")
      .replace(/^\s*User:\s*/i, "")
      .trim();
    const sentences = cleaned.split(/[.!?]+/);
    if (sentences.length > 1 && sentences[sentences.length - 1].trim().length < 5) {
      cleaned = sentences.slice(0, -1).join('.') + '.';
    }
    if (cleaned && !cleaned.match(/[.!?]$/)) {
      cleaned += '.';
    }
    return cleaned;
  }

  private extractIntent(userInput: string, language: "hi" | "en"): string {
    const lowerInput = userInput.toLowerCase();

    const intentKeywords = {
      booking: {
        hi: ["‡§Ö‡§™‡•â‡§á‡§Ç‡§ü‡§Æ‡•á‡§Ç‡§ü", "‡§¨‡•Å‡§ï‡§ø‡§Ç‡§ó", "‡§¨‡•Å‡§ï", "‡§Æ‡§ø‡§≤‡§®‡§æ", "‡§∏‡§Æ‡§Ø", "‡§´‡•ã‡§ü‡•ã‡§∂‡•Ç‡§ü", "‡§∂‡§æ‡§¶‡•Ä"],
        en: [
          "appointment",
          "booking",
          "book",
          "schedule",
          "meet",
          "photoshoot",
          "wedding",
        ],
      },
      tracking: {
        hi: ["‡§ü‡•ç‡§∞‡•à‡§ï", "‡§ë‡§∞‡•ç‡§°‡§∞", "‡§∏‡•ç‡§•‡§ø‡§§‡§ø", "‡§ï‡§π‡§æ‡§Å", "‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞‡•Ä"],
        en: ["track", "order", "status", "where", "delivery", "shipped"],
      },
      pricing: {
        hi: ["‡§ï‡•Ä‡§Æ‡§§", "‡§¶‡§æ‡§Æ", "‡§´‡•Ä‡§∏", "‡§™‡•à‡§∏‡§æ", "‡§ö‡§æ‡§∞‡•ç‡§ú"],
        en: ["price", "cost", "fee", "money", "charge", "rate"],
      },
      help: {
        hi: ["‡§Æ‡§¶‡§¶", "‡§∏‡§π‡§æ‡§Ø‡§§‡§æ", "‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä", "‡§¨‡§§‡§æ‡§ì"],
        en: ["help", "assist", "information", "support", "tell me"],
      },
    };    for (const [intent, keywords] of Object.entries(intentKeywords)) {
      const keywordList = keywords[language];
      if (keywordList && keywordList.some((keyword) => lowerInput.includes(keyword))) {
        return intent;
      }
    }

    return "general";
  }

  private determineNextAction(
    intent: string,
    userInput: string,
    language: "hi" | "en"
  ): string {
    const actionMap: { [key: string]: string } = {
      booking: "collect_booking_details",
      tracking: "collect_order_number",
      pricing: "provide_pricing",
      help: "provide_help",
      general: "continue_conversation",
    };

    return actionMap[intent] || "continue_conversation";
  }

  private getFallbackResponse(
    userInput: string,
    language: "hi" | "en"
  ): string {
    const intent = this.extractIntent(userInput, language);

    switch (intent) {
      case "booking":
        return language === "hi"
          ? "‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§¨‡•Å‡§ï‡§ø‡§Ç‡§ó ‡§Æ‡•á‡§Ç ‡§Æ‡§¶‡§¶ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡§æ ‡§®‡§æ‡§Æ ‡§¨‡§§‡§æ‡§è‡§Ç‡•§"
          : "I can help you with booking. Please tell me your name.";
      case "pricing":
        return language === "hi"
          ? "‡§π‡§Æ‡§æ‡§∞‡•Ä ‡§∏‡•á‡§µ‡§æ‡§ì‡§Ç ‡§ï‡•Ä ‡§ï‡•Ä‡§Æ‡§§‡•á‡§Ç ‡§∂‡•Å‡§∞‡•Ç ‡§π‡•ã‡§§‡•Ä ‡§π‡•à‡§Ç ‚Çπ5000 ‡§∏‡•á‡•§ ‡§µ‡§ø‡§∏‡•ç‡§§‡§æ‡§∞ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡•â‡§≤ ‡§ï‡§∞‡•á‡§Ç‡•§"
          : "Our services start from ‚Çπ5000. Call for detailed pricing.";
      case "tracking":
        return language === "hi"
          ? "‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡§æ ‡§ë‡§∞‡•ç‡§°‡§∞ ‡§®‡§Ç‡§¨‡§∞ ‡§¨‡§§‡§æ‡§è‡§Ç‡•§"
          : "Please provide your order number.";
      default:
        return language === "hi"
          ? "‡§Æ‡•à‡§Ç ‡§Ø‡§π‡§æ‡§Å ‡§Ü‡§™‡§ï‡•Ä ‡§Æ‡§¶‡§¶ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§π‡•Ç‡§Å‡•§ ‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™ ‡§¨‡•Å‡§ï‡§ø‡§Ç‡§ó ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç?"
          : "I am here to help you. Would you like to make a booking?";
    }
  }

  async analyzeIntent(
    text: string,
    language: "hi" | "en"
  ): Promise<{
    intent: string;
    confidence: number;
    entities: string[];
  }> {
    try {
      const messages = [
        {
          role: "system",
          content:
            language === "hi"
              ? "‡§Ü‡§™ ‡§è‡§ï intent classifier ‡§π‡•à‡§Ç‡•§ ‡§á‡§∏ ‡§µ‡§æ‡§ï‡•ç‡§Ø ‡§ï‡§æ ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§â‡§¶‡•ç‡§¶‡•á‡§∂‡•ç‡§Ø ‡§™‡§π‡§ö‡§æ‡§®‡•á‡§Ç: booking, tracking, pricing, ‡§Ø‡§æ help"
              : "You are an intent classifier. Identify the main intent of this sentence: booking, tracking, pricing, or help",
        },
        {
          role: "user",
          content: text,
        },
      ];

      const response = await fetch(this.apiUrl, {
        method: "POST",
        headers: {
          Authorization: `Bearer ${this.apiKey}`,
          "HTTP-Referer": config.server.baseUrl,
          "X-Title": "Yuva Digital Studio Voice Bot",
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          model: this.model,
          messages: messages,
          max_tokens: 50,
          temperature: 0.3,
        }),
      });

      if (response.ok) {
        const data = await response.json();
        const result = data.choices?.[0]?.message?.content || "";

        return {
          intent: this.extractIntent(text, language),
          confidence: 0.9,
          entities: this.extractEntities(text),
        };
      }
    } catch (error) {
      console.error("Intent analysis error:", error);
    }

    return {
      intent: this.extractIntent(text, language),
      confidence: 0.8,
      entities: this.extractEntities(text),
    };
  }

  private extractEntities(text: string): string[] {
    const entities: string[] = [];

    const phonePattern = /\b\d{10,12}\b/g;
    const phones = text.match(phonePattern);
    if (phones) entities.push(...phones);

    const datePattern = /\b\d{1,2}[-/.]\d{1,2}[-/.]\d{2,4}\b/g;
    const dates = text.match(datePattern);
    if (dates) entities.push(...dates);

    const orderPattern = /\b[A-Z]{2,}\d{4,}\b/g;
    const orders = text.match(orderPattern);
    if (orders) entities.push(...orders);

    const namePattern = /\b[A-Z][a-z]+ [A-Z][a-z]+\b/g;
    const names = text.match(namePattern);
    if (names) entities.push(...names);

    return entities;
  }

  async generateActionableResponse(
    userInput: string,
    language: "hi" | "en",
    context: {
      currentStep: string;
      userData: any;
      conversationHistory: string[];
    }
  ): Promise<{
    response: string;
    intent: string;
    nextAction: string;
    suggestedActions: string[];
  }> {
    try {
      const actionPrompt = this.buildActionPrompt(userInput, language, context);

      const messages = [
        {
          role: "system",
          content: actionPrompt,
        },
        {
          role: "user",
          content: userInput,
        },
      ];

      const response = await fetch(this.apiUrl, {
        method: "POST",
        headers: {
          Authorization: `Bearer ${this.apiKey}`,
          "HTTP-Referer": config.server.baseUrl,
          "X-Title": "Yuva Digital Studio Voice Bot",
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          model: this.model,
          messages: messages,
          max_tokens: 80,
          temperature: 0.7,
        }),
      });

      if (response.ok) {
        const data = await response.json();
        const assistantMessage = data.choices?.[0]?.message?.content || "";
        const intent = this.extractIntent(userInput, language);

        return {
          response: this.cleanResponse(assistantMessage),
          intent: intent,
          nextAction: this.determineNextAction(intent, userInput, language),
          suggestedActions: this.getSuggestedActions(intent, language),
        };
      }
    } catch (error) {
      console.warn("Actionable response generation failed:", error);
    }

    const intent = this.extractIntent(userInput, language);
    return {
      response: this.getFallbackResponse(userInput, language),
      intent: intent,
      nextAction: this.determineNextAction(intent, userInput, language),
      suggestedActions: this.getSuggestedActions(intent, language),
    };
  }

  private buildActionPrompt(
    userInput: string,
    language: "hi" | "en",
    context: any
  ): string {
    const currentStep = context.currentStep || "welcome";
    const userData = context.userData || {};

    if (language === "hi") {
      return `‡§Ü‡§™ ‡§è‡§ï AI ‡§è‡§ú‡•á‡§Ç‡§ü ‡§π‡•à‡§Ç ‡§ú‡•ã ${
        this.businessConfig.name
      } ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç‡•§\n\n‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§ö‡§∞‡§£: ${currentStep}\n‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ ‡§°‡•á‡§ü‡§æ: ${JSON.stringify(userData)}\n\n‡§Ü‡§™‡§ï‡•ã ‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ ‡§ï‡•Ä ‡§Æ‡§¶‡§¶ ‡§ï‡§∞‡§®‡•Ä ‡§π‡•à ‡§î‡§∞ ‡§Ö‡§ó‡§≤‡§æ ‡§ï‡§¶‡§Æ ‡§∏‡•Å‡§ù‡§æ‡§®‡§æ ‡§π‡•à‡•§ ‡§π‡§Æ‡•á‡§∂‡§æ ‡§è‡§ï ‡§π‡•Ä, ‡§™‡•Ç‡§∞‡•Ä, ‡§õ‡•ã‡§ü‡•Ä ‡§™‡§Ç‡§ï‡•ç‡§§‡§ø ‡§Æ‡•á‡§Ç ‡§ú‡§µ‡§æ‡§¨ ‡§¶‡•á‡§Ç‡•§ ‡§ï‡§≠‡•Ä ‡§≠‡•Ä ‡§Ö‡§™‡§®‡§æ ‡§â‡§§‡•ç‡§§‡§∞ ‡§Ö‡§ß‡•Ç‡§∞‡§æ ‡§® ‡§õ‡•ã‡§°‡§º‡•á‡§Ç‡•§`;
    } else {
      return `You are an AI agent working for ${this.businessConfig.name}.\n\nCurrent step: ${currentStep}\nUser data: ${JSON.stringify(userData)}\n\nYou need to help the user and suggest next steps. Always reply in a single, complete, short sentence. Never cut off your answer.`;
    }
  }
  private getSuggestedActions(intent: string, language: "hi" | "en"): string[] {
    const actionMap: { [key: string]: { hi: string[]; en: string[] } } = {
      booking: {
        hi: ["‡§®‡§æ‡§Æ ‡§¨‡§§‡§æ‡§è‡§Ç", "‡§∏‡•á‡§µ‡§æ ‡§ö‡•Å‡§®‡•á‡§Ç", "‡§´‡•ã‡§® ‡§®‡§Ç‡§¨‡§∞ ‡§¶‡•á‡§Ç"],
        en: ["Provide name", "Choose service", "Give phone number"],
      },
      tracking: {
        hi: ["‡§ë‡§∞‡•ç‡§°‡§∞ ‡§®‡§Ç‡§¨‡§∞ ‡§¨‡§§‡§æ‡§è‡§Ç", "‡§´‡•ã‡§® ‡§®‡§Ç‡§¨‡§∞ ‡§¶‡•á‡§Ç"],
        en: ["Provide order number", "Give phone number"],
      },
      pricing: {
        hi: ["‡§∏‡•á‡§µ‡§æ ‡§ö‡•Å‡§®‡•á‡§Ç", "‡§¨‡•Å‡§ï‡§ø‡§Ç‡§ó ‡§ï‡§∞‡•á‡§Ç"],
        en: ["Choose service", "Make booking"],
      },
      help: {
        hi: ["‡§¨‡•Å‡§ï‡§ø‡§Ç‡§ó ‡§ï‡§∞‡•á‡§Ç", "‡§ï‡•Ä‡§Æ‡§§ ‡§™‡•Ç‡§õ‡•á‡§Ç"],
        en: ["Make booking", "Ask for pricing"],
      },
    };

    return actionMap[intent]?.[language] || actionMap["help"][language];
  }  private getRateLimitFallback(userInput: string, language: "hi" | "en", context: string[] = []): AIResponse {
    // Extract actual user input if a full prompt was passed
    let actualUserInput = userInput;
    if (userInput.includes("CURRENT USER INPUT:")) {
      const match = userInput.match(/CURRENT USER INPUT:\s*(.+?)(?:\n|$)/);
      if (match && match[1]) {
        actualUserInput = match[1].trim();
      }
    }
    
    const lowerInput = actualUserInput.toLowerCase().trim();
    
    // Handle very short or incomplete inputs
    if (lowerInput.length < 3) {
      return {
        text: language === "hi" 
          ? "‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§¨‡§æ‡§§ ‡§∏‡§Æ‡§ù ‡§®‡§π‡•Ä‡§Ç ‡§™‡§æ‡§Ø‡§æ‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡§æ ‡§∏‡§µ‡§æ‡§≤ ‡§™‡•Ç‡§∞‡§æ ‡§¨‡§§‡§æ‡§è‡§Ç‡•§"
          : "I didn't understand. Please complete your question.",
        intent: "clarification",
        confidence: 0.6,
        language: language,
        nextAction: "continue_conversation"
      };
    }
    
    // Parse session context for better understanding
    const contextText = context.join(' ').toLowerCase();
    const hasNameInSession = contextText.includes('name=') && !contextText.includes('name=unknown') && !contextText.includes('name=null');
    const hasPhoneInSession = contextText.includes('phone=') && !contextText.includes('phone=unknown') && !contextText.includes('phone=null');
    const hasServiceInSession = contextText.includes('service=') && !contextText.includes('service=unknown') && !contextText.includes('service=null');
    const hasBookingContext = contextText.includes('book') || contextText.includes('appointment') || contextText.includes('name') || contextText.includes('phone');
    
    console.log(`üîÑ Rate limit fallback - Input: "${actualUserInput}" | Has name: ${hasNameInSession}, phone: ${hasPhoneInSession}, service: ${hasServiceInSession}`);
    console.log(`üìã Context: ${contextText}`);
    
    let response = "";
    let intent = "general";
    
    // Handle incomplete sentences or partial thoughts
    if (lowerInput.endsWith("of") || lowerInput.endsWith("the") || lowerInput.endsWith("a") || 
        lowerInput.endsWith("an") || lowerInput.endsWith("for") || lowerInput.endsWith("to") ||
        lowerInput.endsWith("with") || lowerInput.endsWith("about") || lowerInput.endsWith("on") ||
        lowerInput.includes("modern solution") || lowerInput.includes("sources of")) {
      
      if (hasBookingContext) {
        if (!hasNameInSession) {
          response = language === "hi" 
            ? "‡§¨‡•Å‡§ï‡§ø‡§Ç‡§ó ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡§æ ‡§®‡§æ‡§Æ ‡§¨‡§§‡§æ‡§è‡§Ç‡•§"
            : "For booking, please tell me your name.";
        } else if (!hasPhoneInSession) {
          response = language === "hi" 
            ? "‡§Ö‡§¨ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡§æ ‡§Æ‡•ã‡§¨‡§æ‡§á‡§≤ ‡§®‡§Ç‡§¨‡§∞ ‡§¨‡§§‡§æ‡§è‡§Ç‡•§"
            : "Now please provide your mobile number.";
        } else if (!hasServiceInSession) {
          response = language === "hi" 
            ? "‡§ï‡•å‡§® ‡§∏‡•Ä ‡§∏‡•á‡§µ‡§æ ‡§ö‡§æ‡§π‡§ø‡§è - Wedding, Portrait, ‡§Ø‡§æ Event ‡§´‡•ã‡§ü‡•ã‡§ó‡•ç‡§∞‡§æ‡§´‡•Ä?"
            : "Which service do you need - Wedding, Portrait, or Event photography?";
        } else {
          response = language === "hi" 
            ? "‡§Ü‡§™‡§ï‡•ã ‡§î‡§∞ ‡§ï‡•ç‡§Ø‡§æ ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§ö‡§æ‡§π‡§ø‡§è?"
            : "What other information do you need?";
        }
      } else {
        response = language === "hi" 
          ? "‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§Æ‡§¶‡§¶ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç‡•§ ‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™ ‡§´‡•ã‡§ü‡•ã‡§ó‡•ç‡§∞‡§æ‡§´‡•Ä ‡§∏‡•á‡§µ‡§æ‡§ì‡§Ç ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§ú‡§æ‡§®‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç ‡§Ø‡§æ ‡§¨‡•Å‡§ï‡§ø‡§Ç‡§ó ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç?"
          : "I can help you. Would you like to know about our photography services or make a booking?";
      }
      intent = "clarification";
    }
    // Handle name provided - check for actual names (proper nouns)
    else if (lowerInput.includes("name is") || lowerInput.includes("i am") || lowerInput.includes("my name") || 
        lowerInput.includes("‡§®‡§æ‡§Æ") || /\b[A-Z][a-z]+\b/.test(actualUserInput)) {
      if (hasNameInSession && !hasPhoneInSession) {
        // Name already captured, need phone
        response = language === "hi" 
          ? "‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶! ‡§Ö‡§¨ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡§æ ‡§Æ‡•ã‡§¨‡§æ‡§á‡§≤ ‡§®‡§Ç‡§¨‡§∞ ‡§¨‡§§‡§æ‡§è‡§Ç‡•§"
          : "Thank you! Now please provide your mobile number.";
      } else if (hasNameInSession && hasPhoneInSession && !hasServiceInSession) {
        // Name and phone captured, need service
        response = language === "hi" 
          ? "‡§¨‡§¢‡§º‡§ø‡§Ø‡§æ! ‡§Ö‡§¨ ‡§¨‡§§‡§æ‡§è‡§Ç ‡§ï‡§ø ‡§Ü‡§™‡§ï‡•ã ‡§ï‡•å‡§® ‡§∏‡•Ä ‡§∏‡•á‡§µ‡§æ ‡§ö‡§æ‡§π‡§ø‡§è?"
          : "Great! Now tell me which service you need?";
      } else if (!hasNameInSession) {
        // First time providing name
        response = language === "hi" 
          ? "‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶! ‡§Ö‡§¨ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡§æ ‡§Æ‡•ã‡§¨‡§æ‡§á‡§≤ ‡§®‡§Ç‡§¨‡§∞ ‡§¨‡§§‡§æ‡§è‡§Ç‡•§"
          : "Thank you! Now please provide your mobile number.";
      } else {
        // All details captured
        response = language === "hi" 
          ? "‡§∏‡§≠‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§Æ‡§ø‡§≤ ‡§ó‡§à ‡§π‡•à‡•§ ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§¨‡•Å‡§ï‡§ø‡§Ç‡§ó ‡§ï‡§®‡•ç‡§´‡§∞‡•ç‡§Æ ‡§ï‡§∞‡§§‡§æ ‡§π‡•Ç‡§Ç‡•§"
          : "I have all the details. Let me confirm your booking.";
      }
      intent = "booking_continue";
    }
    // Handle booking intentions FIRST (before greetings)
    else if (lowerInput.includes("book") || lowerInput.includes("appointment") || lowerInput.includes("‡§Ö‡§™‡•â‡§á‡§Ç‡§ü‡§Æ‡•á‡§Ç‡§ü")) {
      if (!hasNameInSession) {
        response = language === "hi" 
          ? "‡§ú‡§∞‡•Ç‡§∞! ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§¨‡•Å‡§ï‡§ø‡§Ç‡§ó ‡§Æ‡•á‡§Ç ‡§Æ‡§¶‡§¶ ‡§ï‡§∞‡•Ç‡§Ç‡§ó‡§æ‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§¨‡§§‡§æ‡§è‡§Ç - ‡§Ü‡§™‡§ï‡§æ ‡§®‡§æ‡§Æ ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à?"
          : "Certainly! I'll help you with booking. Please tell me - what's your name?";
      } else if (!hasPhoneInSession) {
        response = language === "hi" 
          ? "‡§¨‡•Å‡§ï‡§ø‡§Ç‡§ó ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ö‡§¨ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡§æ ‡§Æ‡•ã‡§¨‡§æ‡§á‡§≤ ‡§®‡§Ç‡§¨‡§∞ ‡§¨‡§§‡§æ‡§è‡§Ç‡•§"
          : "For booking, please provide your mobile number.";
      } else {
        response = language === "hi" 
          ? "‡§ï‡•å‡§® ‡§∏‡•Ä ‡§∏‡•á‡§µ‡§æ ‡§ö‡§æ‡§π‡§ø‡§è - Wedding, Portrait, ‡§Ø‡§æ Event ‡§´‡•ã‡§ü‡•ã‡§ó‡•ç‡§∞‡§æ‡§´‡•Ä?"
          : "Which service do you need - Wedding, Portrait, or Event photography?";
      }
      intent = "booking";
    }
    // Handle phone number
    else if (/\d{10}/.test(lowerInput) || lowerInput.includes("mobile") || lowerInput.includes("phone")) {
      response = language === "hi" 
        ? "‡§¨‡§¢‡§º‡§ø‡§Ø‡§æ! ‡§Ö‡§¨ ‡§¨‡§§‡§æ‡§è‡§Ç ‡§ï‡§ø ‡§Ü‡§™‡§ï‡•ã ‡§ï‡•å‡§® ‡§∏‡•Ä ‡§∏‡•á‡§µ‡§æ ‡§ö‡§æ‡§π‡§ø‡§è - Wedding, Portrait, ‡§Ø‡§æ Event ‡§´‡•ã‡§ü‡•ã‡§ó‡•ç‡§∞‡§æ‡§´‡•Ä?"
        : "Great! Now tell me which service you need - Wedding, Portrait, or Event photography?";
      intent = "booking_service";
    }
    // Handle user asking "what's your name" - clarify that AI is asking for user's name
    else if (lowerInput.includes("what") && lowerInput.includes("your") && lowerInput.includes("name")) {
      if (hasBookingContext) {
        if (hasNameInSession && !hasPhoneInSession) {
          response = language === "hi"
            ? "‡§Æ‡•à‡§Ç‡§®‡•á ‡§Ü‡§™‡§ï‡§æ ‡§®‡§æ‡§Æ ‡§®‡•ã‡§ü ‡§ï‡§∞ ‡§≤‡§ø‡§Ø‡§æ ‡§π‡•à‡•§ ‡§Ö‡§¨ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡§æ ‡§Æ‡•ã‡§¨‡§æ‡§á‡§≤ ‡§®‡§Ç‡§¨‡§∞ ‡§¨‡§§‡§æ‡§è‡§Ç‡•§"
            : "I have your name noted. Now please provide your mobile number.";
        } else {
          response = language === "hi"
            ? "‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§®‡§æ‡§Æ ‡§™‡•Ç‡§õ ‡§∞‡§π‡§æ ‡§π‡•Ç‡§Ç ‡§¨‡•Å‡§ï‡§ø‡§Ç‡§ó ‡§ï‡•á ‡§≤‡§ø‡§è‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡§æ ‡§®‡§æ‡§Æ ‡§¨‡§§‡§æ‡§è‡§Ç‡•§"
            : "I'm asking for YOUR name for the booking. Please tell me your name.";
        }
        intent = "clarification";
      } else {
        response = language === "hi"
          ? "‡§Æ‡•à‡§Ç ‡§è‡§ï AI ‡§Ö‡§∏‡§ø‡§∏‡•ç‡§ü‡•á‡§Ç‡§ü ‡§π‡•Ç‡§Ç‡•§ ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§¨‡•Å‡§ï‡§ø‡§Ç‡§ó ‡§Æ‡•á‡§Ç ‡§Æ‡§¶‡§¶ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç‡•§ ‡§Ü‡§™‡§ï‡§æ ‡§®‡§æ‡§Æ ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à?"
          : "I'm an AI assistant. I can help you with booking. What's your name?";
        intent = "clarification";
      }
    }
    // Handle greetings
    else if (lowerInput.includes("hello") || lowerInput.includes("hi") || lowerInput.includes("‡§®‡§Æ‡§∏‡•ç‡§§‡•á")) {
      response = this.getRandomGreeting(language);
      intent = "greeting";
    }
    // Handle services inquiry
    else if (lowerInput.includes("service") || lowerInput.includes("photography") || lowerInput.includes("‡§∏‡•á‡§µ‡§æ")) {
      response = language === "hi" 
        ? "‡§π‡§Æ‡§æ‡§∞‡•Ä ‡§∏‡•á‡§µ‡§æ‡§è‡§Ç: Wedding Photography (35 ‡§π‡§ú‡§º‡§æ‡§∞ ‡§∏‡•á), Portrait Sessions (2500 ‡§∏‡•á), Event Photography (5000 ‡§∏‡•á)‡•§ ‡§ï‡•å‡§® ‡§∏‡•Ä ‡§ö‡§æ‡§π‡§ø‡§è?"
        : "Our services: Wedding Photography (from 35k), Portrait Sessions (from 2500), Event Photography (from 5k). Which one?";
      intent = "service_inquiry";
    }
    // Handle pricing inquiries
    else if (lowerInput.includes("price") || lowerInput.includes("cost") || lowerInput.includes("‡§ï‡•Ä‡§Æ‡§§")) {
      response = language === "hi" 
        ? "‡§π‡§Æ‡§æ‡§∞‡•Ä ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§ï‡•Ä‡§Æ‡§§‡•á‡§Ç: Wedding: 35-125 ‡§π‡§ú‡§º‡§æ‡§∞, Portrait: 2500-4500, Event: 5000-8500 ‡§∞‡•Å‡§™‡§è‡•§ ‡§ï‡•å‡§® ‡§∏‡•Ä ‡§∏‡•á‡§µ‡§æ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§™‡•Ç‡§õ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç?"
        : "Our pricing: Wedding: 35-125k, Portrait: 2500-4500, Event: 5000-8500 rupees. Which service are you asking about?";
      intent = "pricing";
    }
    // Handle wedding specific
    else if (lowerInput.includes("wedding") || lowerInput.includes("‡§∂‡§æ‡§¶‡•Ä")) {
      response = language === "hi" 
        ? "Wedding Photography ‡§ï‡•á ‡§≤‡§ø‡§è ‡§π‡§Æ‡§æ‡§∞‡•á ‡§™‡•à‡§ï‡•á‡§ú 35,000 ‡§∏‡•á 1,25,000 ‡§§‡§ï ‡§π‡•à‡§Ç‡•§ ‡§á‡§∏‡§Æ‡•á‡§Ç ‡§™‡•Ç‡§∞‡•á ‡§¶‡§ø‡§® ‡§ï‡•Ä ‡§ï‡§µ‡§∞‡•á‡§ú, ‡§ë‡§®‡§≤‡§æ‡§á‡§® ‡§ó‡•à‡§≤‡§∞‡•Ä ‡§î‡§∞ ‡§è‡§°‡§ø‡§ü‡§ø‡§Ç‡§ó ‡§∂‡§æ‡§Æ‡§ø‡§≤ ‡§π‡•à‡•§ ‡§¨‡•Å‡§ï‡§ø‡§Ç‡§ó ‡§ï‡•á ‡§≤‡§ø‡§è ‡§®‡§æ‡§Æ ‡§¨‡§§‡§æ‡§è‡§Ç‡•§"
        : "Our Wedding Photography packages range from 35,000 to 1,25,000. This includes full day coverage, online gallery and editing. Please share your name to book.";
      intent = "service_specific";
    }
    // Handle unclear or ambiguous inputs
    else if (lowerInput.includes("modern") || lowerInput.includes("solution") || lowerInput.includes("source") || 
             lowerInput.includes("what") || lowerInput.includes("how") || lowerInput.includes("why") ||
             lowerInput.includes("when") || lowerInput.includes("where")) {
      
      if (hasBookingContext) {
        // If we're in a booking context, guide back to booking flow
        if (!hasNameInSession) {
          response = language === "hi" 
            ? "‡§¨‡•Å‡§ï‡§ø‡§Ç‡§ó ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡§æ ‡§®‡§æ‡§Æ ‡§¨‡§§‡§æ‡§è‡§Ç‡•§"
            : "For booking, please tell me your name.";
        } else if (!hasPhoneInSession) {
          response = language === "hi" 
            ? "‡§Ö‡§¨ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡§æ ‡§Æ‡•ã‡§¨‡§æ‡§á‡§≤ ‡§®‡§Ç‡§¨‡§∞ ‡§¨‡§§‡§æ‡§è‡§Ç‡•§"
            : "Now please provide your mobile number.";
        } else if (!hasServiceInSession) {
          response = language === "hi" 
            ? "‡§ï‡•å‡§® ‡§∏‡•Ä ‡§∏‡•á‡§µ‡§æ ‡§ö‡§æ‡§π‡§ø‡§è - Wedding, Portrait, ‡§Ø‡§æ Event ‡§´‡•ã‡§ü‡•ã‡§ó‡•ç‡§∞‡§æ‡§´‡•Ä?"
            : "Which service do you need - Wedding, Portrait, or Event photography?";
        } else {
          response = language === "hi" 
            ? "‡§Ü‡§™‡§ï‡•Ä ‡§¨‡•Å‡§ï‡§ø‡§Ç‡§ó ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡§≠‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§Æ‡§ø‡§≤ ‡§ó‡§à ‡§π‡•à‡•§ ‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™ ‡§ï‡§®‡•ç‡§´‡§∞‡•ç‡§Æ ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç?"
            : "I have all the information for your booking. Would you like to confirm?";
        }
      } else {
        // General context - offer help
        response = language === "hi" 
          ? "‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§Æ‡§¶‡§¶ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç‡•§ ‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™ ‡§´‡•ã‡§ü‡•ã‡§ó‡•ç‡§∞‡§æ‡§´‡•Ä ‡§∏‡•á‡§µ‡§æ‡§ì‡§Ç ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§ú‡§æ‡§®‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç ‡§Ø‡§æ ‡§¨‡•Å‡§ï‡§ø‡§Ç‡§ó ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç?"
          : "I can help you. Would you like to know about our photography services or make a booking?";
      }
      intent = "clarification";
    }
    // Generic response based on session state
    else {
      if (hasBookingContext) {
        if (hasNameInSession && !hasPhoneInSession) {
          response = language === "hi" 
            ? "‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡§æ ‡§Æ‡•ã‡§¨‡§æ‡§á‡§≤ ‡§®‡§Ç‡§¨‡§∞ ‡§¨‡§§‡§æ‡§è‡§Ç‡•§"
            : "Please provide your mobile number.";
          intent = "booking_continue";
        } else if (!hasNameInSession) {
          response = language === "hi" 
            ? "‡§¨‡•Å‡§ï‡§ø‡§Ç‡§ó ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡§æ ‡§®‡§æ‡§Æ ‡§¨‡§§‡§æ‡§è‡§Ç‡•§"
            : "For booking, please tell me your name.";
          intent = "booking_continue";
        } else {
          response = language === "hi" 
            ? "‡§Ü‡§™‡§ï‡•ã ‡§î‡§∞ ‡§ï‡•å‡§® ‡§∏‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§ö‡§æ‡§π‡§ø‡§è?"
            : "What other information do you need?";
          intent = "clarification";
        }
      } else {
        response = language === "hi" 
          ? "‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§¨‡§æ‡§§ ‡§∏‡§Æ‡§ù ‡§ó‡§Ø‡§æ‡•§ ‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™ ‡§´‡•ã‡§ü‡•ã‡§ó‡•ç‡§∞‡§æ‡§´‡•Ä ‡§ï‡•Ä ‡§¨‡•Å‡§ï‡§ø‡§Ç‡§ó ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç?"
          : "I understand. Would you like to book photography services?";
        intent = "clarification";
      }
    }
    
    return {
      text: response,
      intent: intent,
      confidence: 0.8,
      language: language,
      nextAction: "continue_conversation"
    };
  }

  private getErrorFallback(userInput: string, language: "hi" | "en"): AIResponse {
    const response = language === "hi" 
      ? "‡§ï‡•ç‡§∑‡§Æ‡§æ ‡§ï‡§∞‡•á‡§Ç, ‡§§‡§ï‡§®‡•Ä‡§ï‡•Ä ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§π‡•à‡•§ ‡§´‡§ø‡§∞ ‡§ï‡•ã‡§∂‡§ø‡§∂ ‡§ï‡§∞‡•á‡§Ç‡•§"
      : "Sorry, technical issue. Please try again.";
      
    return {
      text: response,
      intent: "error",
      confidence: 0.5,
      language: language,
      nextAction: "retry"
    };
  }

  private getRandomGreeting(language: "hi" | "en"): string {
    const greetingsEn = [
      "Hello! Welcome to Yuva Digital Studio. How can I help you today?",
      "Hi there! Welcome to Yuva Digital Studio. What can I do for you?",
      "Good day! This is Yuva Digital Studio. How may I assist you?",
      "Welcome to Yuva Digital Studio! I'm here to help with your photography needs.",
      "Hello! Thanks for calling Yuva Digital Studio. What brings you here today?"
    ];

    const greetingsHi = [
      "‡§®‡§Æ‡§∏‡•ç‡§§‡•á! Yuva Digital Studio ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à‡•§ ‡§Ü‡§ú ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§ï‡•à‡§∏‡•á ‡§Æ‡§¶‡§¶ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç?",
      "‡§®‡§Æ‡§∏‡•ç‡§ï‡§æ‡§∞! Yuva Digital Studio ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à‡•§ ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§ï‡•ç‡§Ø‡§æ ‡§∏‡•á‡§µ‡§æ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç?",
      "‡§Ü‡§¶‡§æ‡§¨! ‡§Ø‡§π Yuva Digital Studio ‡§π‡•à‡•§ ‡§Ü‡§ú ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§ï‡•à‡§∏‡•á ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç?",
      "‡§®‡§Æ‡§∏‡•ç‡§§‡•á! Yuva Digital Studio ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§π‡§æ‡§∞‡•ç‡§¶‡§ø‡§ï ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à‡•§ ‡§Æ‡•à‡§Ç ‡§Ø‡§π‡§æ‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§´‡•ã‡§ü‡•ã‡§ó‡•ç‡§∞‡§æ‡§´‡•Ä ‡§ï‡•Ä ‡§ú‡§∞‡•Ç‡§∞‡§§‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§Æ‡§¶‡§¶ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§π‡•Ç‡§Ç‡•§",
      "‡§™‡•ç‡§∞‡§£‡§æ‡§Æ! Yuva Digital Studio ‡§ï‡•ã ‡§ï‡•â‡§≤ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶‡•§ ‡§Ü‡§ú ‡§Ü‡§™ ‡§Ø‡§π‡§æ‡§Ç ‡§ï‡•ç‡§Ø‡•ã‡§Ç ‡§Ü‡§è ‡§π‡•à‡§Ç?"
    ];

    const greetings = language === "hi" ? greetingsHi : greetingsEn;
    const randomIndex = Math.floor(Math.random() * greetings.length);
    return greetings[randomIndex];
  }

  /**
   * Uses LLM to extract both intent and entities from user input in a single call.
   * Returns: { intent, confidence, entities }
   */
  async extractIntentAndEntitiesLLM(userInput: string, language: "hi" | "en" = "en"): Promise<{
    intent: string;
    confidence: number;
    entities: {
      name?: string;
      phone?: string;
      date?: string;
      time?: string;
      service?: string;
      [key: string]: any;
    };
  }> {
    const systemPrompt = language === 'hi'
      ? `‡§Ü‡§™ ‡§è‡§ï ‡§∏‡•ç‡§Æ‡§æ‡§∞‡•ç‡§ü ‡§Ö‡§∏‡§ø‡§∏‡•ç‡§ü‡•á‡§Ç‡§ü ‡§π‡•à‡§Ç‡•§ ‡§®‡§ø‡§Æ‡•ç‡§®‡§≤‡§ø‡§ñ‡§ø‡§§ ‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ ‡§á‡§®‡§™‡•Å‡§ü ‡§∏‡•á ‡§Æ‡•Å‡§ñ‡•ç‡§Ø intent (booking, inquiry, pricing, help, greeting, clarification, cancellation, etc.) ‡§î‡§∞ entities (name, phone, date, time, service) ‡§®‡§ø‡§ï‡§æ‡§≤‡•á‡§Ç‡•§

‡§â‡§§‡•ç‡§§‡§∞ ‡§è‡§ï JSON ‡§ë‡§¨‡•ç‡§ú‡•á‡§ï‡•ç‡§ü ‡§ï‡•á ‡§∞‡•Ç‡§™ ‡§Æ‡•á‡§Ç ‡§¶‡•á‡§Ç:
{"intent": "...", "confidence": 0.9, "entities": {"name": "...", "phone": "...", "date": "...", "time": "...", "service": "..."}}`
      : `You are a smart assistant. From the following user input, extract the main intent (booking, inquiry, pricing, help, greeting, clarification, cancellation, etc.) and any entities (name, phone, date, time, service).

Respond with a JSON object:
{"intent": "...", "confidence": 0.9, "entities": {"name": "...", "phone": "...", "date": "...", "time": "...", "service": "..."}}`;

    const messages = [
      { role: 'system', content: systemPrompt },
      { role: 'user', content: userInput }
    ];

    try {
      const response = await fetch(this.apiUrl, {
        method: "POST",
        headers: {
          Authorization: `Bearer ${this.apiKey}`,
          "HTTP-Referer": config.server.baseUrl,
          "X-Title": "Yuva Digital Studio Voice Bot",
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          model: this.model,
          messages: messages,
          max_tokens: 120,
          temperature: 0.2,
        }),
      });
      if (response.ok) {
        const data = await response.json();
        const content = data.choices?.[0]?.message?.content || "";
        // Try to parse JSON from the LLM response
        try {
          const parsed = JSON.parse(content);
          return parsed;
        } catch (e) {
          // If not valid JSON, fallback to basic intent extraction
          return {
            intent: this.extractIntent(userInput, language),
            confidence: 0.7,
            entities: {},
          };
        }
      }
    } catch (error) {
      console.error("LLM intent/entity extraction error:", error);
    }
    // Fallback
    return {
      intent: this.extractIntent(userInput, language),
      confidence: 0.6,
      entities: {},
    };
  }
}
